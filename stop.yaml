trigger: none

pool:
  vmImage: 'windows-latest'

variables:
  WebServer: '74.225.27.222'          # replace with VM IP/hostname
  SiteName: 'Default Web Site'
  AppPoolName: 'DefaultAppPool'
  IISUser: 'Shabareesh'               # move to Variable Group as secret
  IISPassword: 'Shabareesh@7'         # move to Variable Group as secret

stages:
- stage: ManageIIS
  displayName: 'Manage IIS Site and App Pool via PowerShell Remoting'
  jobs:
  - job: IISControl
    displayName: 'Stop Site & App Pool, Print VM Name, Start Site & App Pool'
    steps:

    - task: PowerShell@2
      displayName: 'Stop IIS Site and App Pool remotely'
      inputs:
        targetType: 'inline'
        script: |
          Write-Host "Connecting to remote server: $(WebServer)"

          $sec  = ConvertTo-SecureString "$(IISPassword)" -AsPlainText -Force
          $cred = [PSCredential]::new("$(IISUser)", $sec)
          $opts = New-PSSessionOption -SkipCACheck -SkipCNCheck   # self-signed cert

          $session = New-PSSession -ComputerName "$(WebServer)" -UseSSL -Port 5986 -Authentication Basic -Credential $cred -SessionOption $opts
          try {
            Invoke-Command -Session $session -ArgumentList "$(SiteName)", "$(AppPoolName)" -ScriptBlock {
              param($site, $pool)
              Import-Module WebAdministration

              # Stop Site
              try {
                $siteState = (Get-WebsiteState -Name $site -ErrorAction Stop).Value
                if ($siteState -eq 'Started') {
                  Write-Host ("Stopping site: {0}" -f $site)
                  Stop-Website -Name $site -ErrorAction Stop
                } else {
                  Write-Host ("Site already stopped: {0}" -f $site)
                }
              } catch {
                Write-Warning ("Error stopping site {0}: {1}" -f $site, $_)
                throw
              }

              # Stop App Pool
              try {
                $poolState = (Get-WebAppPoolState -Name $pool -ErrorAction Stop).Value
                if ($poolState -eq 'Started') {
                  Write-Host ("Stopping app pool: {0}" -f $pool)
                  Stop-WebAppPool -Name $pool -ErrorAction Stop
                } else {
                  Write-Host ("App pool already stopped: {0}" -f $pool)
                }
              } catch {
                Write-Warning ("Error stopping app pool {0}: {1}" -f $pool, $_)
                throw
              }
            }
          } finally {
            if ($session) { Remove-PSSession $session }
          }
